Core ConceptsPlans
Plans
A plan in Plandex is similar to a conversation in ChatGPT or Claude. It might only include a single prompt and model response that executes one small task, or it could represent a long back and forth with the model that generates dozens of files and builds a whole feature or an entire project.

A plan includes:

Any context that you or the model have loaded.
Your conversation with the model.
Any pending changes that have been accumulated during the course of the conversation.
Plans support version control and branches.

Creating a New Plan
First cd into your project's directory. Make a new directory first with mkdir your-project-dir if you're starting on a new project.

cd your-project-dir

REPL
To start a new plan with the REPL, just run:

plandex

If you haven't created a new plan in this directory previously, a plan will automatically be created for you when the REPL starts.

If already have a plan loaded in the REPL (you can check with \current), you can start a new plan with \new.

CLI
You can create a new plan through the CLI with plandex new.

plandex new

Plan Names and Drafts
When you create a plan, Plandex will automatically name your plan after you send the first prompt, but you can also give it a name up front.

plandex new -n foo-adapters-component

If you don't give your plan a name up front, it will be named draft until you send an initial prompt. To keep things tidy, you can only have one active plan named draft. If you create a new draft plan, any existing draft plan will be removed.

Listing Plans
When you have multiple plans, you can list them with the plans command.

plandex plans

The Current Plan
It's important to know what the current plan is for any given directory, since most Plandex commands are executed against that plan.

To check the current plan:

plandex current

You can change the current plan with the cd command:

plandex cd # select from a list of plans
plandex cd some-other-plan # cd to a plan by name
plandex cd 2 # cd to a plan by number in the `plandex plans` list

Deleting Plans
You can delete a plan with the delete-plan command:

plandex delete-plan # select from a list of plans to delete
plandex delete-plan some-plan # delete a plan by name
plandex delete-plan 4 # delete a plan by number in the `plandex plans` list

Archiving Plans
You can archive plans you want to keep around but aren't currently working on with the archive command. You can see archived plans in the current directory with plans --archived. You can unarchive a plan with the unarchive command.

plandex archive # select from a list of plans to archive
plandex archive some-plan # archive a plan by name
plandex archive 2 # archive a plan by number in the `plandex plans` list

plandex unarchive # select from a list of archived plans to unarchive
plandex unarchive some-plan # unarchive a plan by name
plandex unarchive 2 # unarchive a plan by number in the `plandex plans --archived` list

.plandex Directory
When you run plandex (for a REPL) or plandex new for the first time in any directory, Plandex will create a .plandex directory there for light project-level config.

If multiple people are using Plandex with the same project, you should either:

Commit the .plandex directory and get everyone into the same org in Plandex.
Put .plandex/ in .gitignore
Project Directories
So far, we've assumed you're running plandex or plandex new to create plans in your project's root directory. While that is the most common use case, it can be useful to create plans in subdirectories of your project too.

That's because context file paths in Plandex are specified relative to the directory where the plan was created. So if you're working on a plan for just one part of your project, you might want to create the plan in a subdirectory in order to shorten paths when loading context or referencing files in your prompts.

Starting a plan (or REPL) in a subdirectory is also helpful when using automatic context loading to limit the size of the project map and what files are available for the LLM to load.

It can also help with plan organization if you have a lot of plans.

When you run plandex plans, in addition to showing you plans in the current directory, Plandex will also show you plans in nearby parent directories or subdirectories. This helps you keep track of what plans you're working on and where they are in your project hierarchy. If you want to switch to a plan in a different directory, first cd into that directory, then run plandex cd to select the plan.

Edit this page


Core ConceptsContext
Context Management
Context in Plandex refers to files, directories, URLs, images, notes, or piped in data that the LLM uses to understand and work on your project. Context is always associated with a plan.

Changes to context are version controlled and can be branched.

Automatic vs. Manual
As of v2, Plandex loads context automatically by default. When a new plan is created, a project map is generated and loaded into context. The LLM then uses this map to select relevant context before planning a task or responding to a message.

Tradeoffs
Automatic context loading makes Plandex more powerful and easier to work with, but there are tradeoffs in terms of cost, focus, and output speed. If you're trying to minimize costs or you know for sure that only one or two files are relevant to a task, you might prefer to load context manually.

Setting Manual Mode
You can use manual context loading by:

Using set-auto to choose a lower autonomy level that has auto-load-context disabled (like plus or basic).
plandex set-auto plus
plandex set-auto basic
plandex set-auto default plus # set the default value for all new plans

Starting a new REPL or a new plan with the --plus or --basic flags, which will automatically set the config option to the chosen autonomy level.
plandex --plus
plandex new --basic

Setting the auto-load-context config option to false:
plandex set-config auto-load-context false
plandex set-config default auto-load-context false # set the default value for all new plans

Smart Context Window Management
Another new context management feature in v2 is smart context window management. When making a plan with multiple steps, Plandex will determine which files are relevant to each step. Only those files will be loaded into context during implementation.

When combined with automatic context loading, this effectively creates a sliding context window that grows and shrinks as needed throughout the plan.

Smart context can also be used when you're managing context manually. To give an example: say you've manually loaded a directory with 10 files in it, and you need to make some updates to each one of them. Without smart context, each step of the implementation will load all 10 files into context. But if you use smart context, only the one or two files that are edited in each step will be loaded.

Smart context is enabled in the plus autonomy level and above. You can also toggle it with set-config:

plandex set-config smart-context true
plandex set-config smart-context false
plandex set-config default smart-context false # set the default value for all new plans

Automatic Context Updates
When you make your own changes to files in context separately from Plandex, those files need to be updated before the plan can continue. Previously, Plandex would prompt you to update context every time a file was changed. This is now automatic by default.

Automatic updates are enabled in the plus autonomy level and above. You can also toggle them with set-config:

plandex set-config auto-update-context true
plandex set-config auto-update-context false
plandex set-config default auto-update-context false # set the default value for all new plans

Autonomy Matrix
Here are the different autonomy levels as they relate to context management config options:

none	basic	plus	semi	full
auto-load-context	❌	❌	❌	✅	✅
smart-context	❌	❌	✅	✅	✅
auto-update-context	❌	❌	✅	✅	✅
Mixing Automatic and Manual Context
You can manually load additional context even if automatic loading is enabled. The way this additional context is handled works somewhat differently.

First, consider how automatic context loading works across each stage of a plan:

Automatic context loading (no manual context added)
Context loading: Only the project map is initially loaded. The map, along with your prompt, is used to select relevant context.
Planning: Only context selected in step 1 is loaded.
Implementation: Smart context (if enabled) filters context again, loading only what's directly relevant to each step.
Here's how it changes when you load manual context on top:

Automatic loading + manual context
Context loading: Your manually loaded context is always included alongside the project map.
Planning: Manually loaded context is always loaded, whether or not it's selected by the map-based context selection step.
Implementation: Smart context (if enabled) filters all context again (both manual and automatic), loading only what's directly relevant to each implementation step.
Loading files manually when using automatic context loading can sometimes be useful when you know certain files are relevant and don't want to risk the LLM leaving them out, or when the LLM is struggling to select the right context. If there are files that can help the LLM select the right context, like READMEs or documentation that describes the structure of the project, those can also be good candidates for manual loading.

Another use for manual context loading is for context types that can't be loaded automatically, like URLs, notes, or piped data (for now Plandex can only automatically load project files and images within the project).

Manually Loading Context
To load files, directories, directory layouts, urls, images, notes, or piped data into a plan's context, use the plandex load command.

Loading Files
You can pass load one or more file paths. File paths are relative to the current directory in your terminal.

plandex load component.ts # single file
plandex load component.ts action.ts reducer.ts # multiple files
pdx l component.ts # alias

You can also load multiple files using glob patterns:

plandex load tests/**/*.ts # loads all .ts files in 'tests' and its subdirectories
plandex load * # loads all files in the current directory

You can load context from parent or sibling directories if needed by using .. in your load paths.

plandex load ../file.go # loads file.go from parent directory
plandex load ../sibling-dir/test.go # loads test.go from sibling directory

Loading Directories
You can load an entire directory with the --recursive/-r flag:

plandex load lib -r # loads lib, all its files and all its subdirectories
plandex load * -r # loads all files in the current directory and all its subdirectories

Loading Files and Directories in the REPL
In the Plandex REPL, you can use the shortcut @ plus a relative file path to load a file or directory into context.

@component.ts # loads component.ts
@lib # loads lib directory, and all its files and subdirectories

Loading Directory Layouts
There are tasks where it's helpful for the LLM to the know the structure of your project or sections of your project, but it doesn't necessarily need to the see the content of every file. In that case, you can pass in a directory with the --tree flag to load in the directory layout. It will include just the names of all included files and subdirectories (and each subdirectory's files and subdirectories, and so on).

plandex load . --tree # loads the layout of the current directory and its subdirectories (file names only)
plandex load src/components --tree # loads the layout of the src/components directory


Loading Project Maps
Plandex can create a project map for any directory using tree-sitter. This shows all the top-level symbols, like variables, functions, classes, etc. in each file. 30+ languages are supported. For non-supported languages, files are still listed without symbols so that the model is aware of their existence.

Maps are mainly used for selecting context during automatic context loading, but can also be used with manual context management in order to improve output. Maps make it much more likely that an LLM will, for example, use an existing function in your project (and call it correctly) rather than generating a new one that does the same thing.

plandex load . --map

Loading URLs
Plandex can load the text content of URLs, which can be useful for adding relevant documentation, blog posts, discussions, and the like.

plandex load https://redux.js.org/usage/writing-tests # loads the text-only content of the url

Loading Images
Plandex can load images into context.

plandex load ui-mockup.png

For most models that support images, png, jpeg, non-animated gif, and webp formats are supported. Some models may support fewer or additional formats.

Loading Notes
You can add notes to context, which are just simple strings.

plandex load -n 'add logging statements to all the code you generate.' # load a note into context

Notes can be useful as 'sticky' explanations or instructions that will tend to have more prominence throughout a long conversation than normal prompts. That's because long conversations are summarized to stay below a token limit, which can cause some details from your prompts to be dropped along the way. This doesn't happen if you use notes.

Piping Into Context
You can pipe the results of other commands into context:

npm test | plandex load # loads the output of `npm test`

Ignoring files
If you're in a git repo, Plandex respects .gitignore and won't load any files that you're ignoring. You can also add a .plandexignore file with ignore patterns to any directory.

You can force Plandex to load ignored files with the --force/-f flag:

plandex load .env --force # loads the .env file even if it's in .gitignore or .plandexignore

Viewing Context
To list everything in context, use the plandex ls command:

plandex ls

You can also see the content of any context item with the plandex show command:

plandex show component.ts # show the content of component.ts
plandex show 2 # show the content of the second item in the `plandex ls` list

Removing Context
To remove selectively remove context, use the plandex rm command:

plandex rm component.ts # remove by name
plandex rm 2 # remove by number in the `plandex ls` list
plandex rm 2-5 # remove a range of indices
plandex rm lib/**/*.js # remove by glob pattern
plandex rm lib # remove whole directory

Clearing Context
To clear all context, use the plandex clear command:

plandex clear

Updating Context
If files, directory layouts, or URLs in context are modified outside of Plandex, they will need to be updated next time you send a prompt.

Whether they'll be updated automatically or you'll be prompted to update them depends on the auto-update-context config option.

You can also update any outdated files with the update command.

plandex update # update files in context

Core ConceptsPrompts
Prompts
Sending Prompts
In the REPL
To send a prompt in the REPL, just type your prompt and press enter.

You can also use \multi to enable multi-line mode. This will cause enter to produce line breaks. In multi-line mode, you can send your prompt with \send.

If you want to pass in a file as a prompt in the REPL, you can use the \run command with a relative file path:

\run src/components/foobars-form.tsx

With the CLI
To send a prompt with the CLI, use the plandex tell command for a task, or the plandex chat command to brainstorm or ask questions.

You can pass it in as a file with the --file/-f flag:

plandex tell -f prompt.txt
plandex chat -f prompt.txt

Write it in vim:

plandex tell # tell with no arguments opens vim so you can write your prompt there
plandex chat # chat with no arguments does the same

Pass it inline (use enter for line breaks):

plandex tell "add a new line chart showing the number of foobars over time to components/charts.tsx"
plandex chat "where's the database connection logic in this project?"


You can also pipe in the results of another command:

git diff | plandex tell
git diff | plandex chat

When you pipe in results like this, you can also supply an inline string to give a label or additional context to the results:

git diff | plandex tell "'git diff' output"

Plan Stream TUI
After you send a prompt with the REPL, plandex tell, or plandex chat, you'll see the plan stream TUI. The model's responses are streamed here. You'll see several hotkeys listed along the bottom row that allow you to stop the plan (s), send the plan to the background (b), scroll/page the streamed text, or jump to the beginning or end of the stream. If you're a vim user, you'll notice Plandex's scrolling hotkeys are the same as vim's.

Note that scrolling the terminal window itself won't work while you're in the stream TUI. Use the scroll hotkeys instead.

Task Prompts
When you give Plandex a task, it will first break down the task into steps, then it will proceed to implement each step in code. Plandex will automatically continue sending model requests until the task is determined to be complete.

Chat Prompts
If you want to ask Plandex questions or chat without generating files or making changes, use the plandex chat command instead of plandex tell.

plandex chat "explain every function in lib/math.ts"

Plandex will reply with just a single response, won't create or update any files, and won't automatically continue.

plandex chat has the same options for passing in a prompt as plandex tell. You can pass a string inline, give it a file with --file/-f, type the prompt in vim by running plandex chat with no arguments, or pipe in the results of another command.

In the REPL
In the REPL, you can control whether prompts are sent to plandex tell or plandex chat under the hood by toggling chat mode with \chat (\ch) or \tell (\t).

Stopping and Continuing
When using plandex tell, you can prevent Plandex from automatically continuing for multiple responses by passing the --stop/-s flag:

plandex tell -s "write tests for the charting helpers in lib/chart-helpers.ts"

Plandex will then reply with just a single response. From there, you can continue if desired with the continue command. Like tell, continue can also accept a --stop/-s flag. Without the --stop/-s flag, continue will also cause Plandex to continue automatically until the task is done. If you pass the --stop/-s flag, it will continue for just one more response.

plandex continue -s

Apart from --stop/-s Plandex's plan stream TUI also has an s hotkey that allows you to immediately stop a plan.

You can also stop a plan from automatically continuing by setting the auto-continue config option to false in a plan's configuration:

plandex set-config auto-continue false
plandex set-config default auto-continue false # set the default config's auto-continue to false for all new plans


or by setting the auto-mode (autonomy level) to none:

plandex set-auto none
plandex set-default-auto none # set the default auto-mode to none for all new plans

Background Tasks
By default, plandex tell opens the plan stream TUI and streams Plandex's response(s) there, but you can also pass the --bg flag to run a task in the background instead.

You can learn more about using and interacting with background tasks here.

Keeping Context Updated
When you send a prompt, whether through plandex tell or plandex chat, Plandex will check whether the content of any files, directory layouts, or URLs you've loaded into context have changed. If so, you'll need to update the context before continuing.

By default, Plandex will update any outdated context automatically, but if you'd rather approve these updates, you can set the auto-update-context config option to false:

plandex set-config auto-update-context false
plandex set-config default auto-update-context false # set the default config's auto-update-context to false for all new plans


or you can set the auto-mode to basic or none:

plandex set-auto basic
plandex set-auto none

Building Files
As Plandex implements your task, files it creates or updates will appear in the Building Plan section of the plan stream TUI. Plandex will build all changes proposed by the plan into a set of pending changesets for each affected file.

By default, these changes initially will not be directly applied to your project files. Instead, they will be pending in Plandex's version-controlled sandbox.

This allows you to review the proposed changes or continue iterating and accumulating more changes. You can view the pending changes with plandex diff (for git diff format in the terminal) or plandex diff --ui (to view them in a local browser UI). Once you're happy with the changes, you can apply them to your project files with plandex apply.

Learn more about reviewing changes.
Learn more about version control.
Full auto mode
An important caveat to the above: if you set the auto-mode to full, Plandex will automatically apply the changes to your project files,

Skipping builds / plandex build
You can skip building files when you send a prompt by passing the --no-build flag to plandex tell or plandex continue. This can be useful if you want to ensure that a plan is on the right track before building files.

plandex tell "implement sign up and sign in forms in src/components" --no-build

You can later build any changes that were implemented in the plan with the plandex build command:

plandex build

This will show a smaller version of the plan stream TUI that only includes the Building Plan section.

Like full plan streams, build streams can be stopped with the s hotkey or sent to the background with the b hotkey. They can also be run fully in the background with the --bg flag:

plandex build --bg

There's one more thing to keep in mind about builds. If you send a prompt with the --no-build flag:

plandex tell "implement a forgot password email in src/emails" --no-build

Then you later send another prompt with plandex tell or continue the plan with plandex continue and you don't include the --no-build flag, any changes that were implemented previously but weren't built will immediately start building when the plan stream begins.

plandex tell "now implement the UI portion of the forgot password flow"
# the above will start building the changes proposed in the earlier prompt that was passed --no-build


Automatically Applying Changes
If you want Plandex to automatically apply changes when a plan is complete, you can pass the --apply/-a flag to plandex tell, plandex continue, or plandex build:

plandex tell "add a new route for updating notification settings to src/routes.ts" --apply

The --apply/-a flag will also automatically update context if needed, just as the --yes/-y flag does.

When passing --apply/-a, you can also use the --commit/-c flag to commit the changes to git with an auto-generated commit message. This will only commit the specific changes that were made by the plan. Any other changes in your git repository, staged or unstaged, will remain as they are.

plandex tell "add a new route for updating notification settings to src/routes.ts" --apply --commit


Iterating on a Plan
If you send a prompt:

plandex tell "implement a fully working and production-ready tic tac toe game, including a computer-controlled AI, in html, css, and javascript"


And then you want to iterate on it, whether that's to add more functionality or correct something that went off track, you have a couple options.

Continue the convo
The most straightforward way to continue iterating is to simply send another plandex tell command:

plandex tell "I plan to seek VC funding for this game, so please implement a dark mode toggle and give all buttons subtle gradient fills"


This is generally a good approach when you're happy with the current plan and want to extend it to add more functionality.

Note, you can view the full conversation history with the plandex convo command:

plandex convo

Rewind and iterate
Another option is to use Plandex's version control features to rewind to the point just before your prompt was sent and then update it before sending the prompt again.

You can use plandex log to see the plan's history and determine which step to rewind to, then plandex rewind with the appropriate hash to rewind to that step:

plandex log # see the history
plandex rewind accfe9 # rewind to right before your prompt

This approach works well in conjunction with prompt files. You write your prompts in files somewhere in your codebase, then pass those to plandex tell using the --file/-f flag:

plandex tell -f prompts/tic-tac-toe.txt

This makes it easy to continuously iterate on your prompt using plandex rewind and plandex tell until you get a result that you're happy with.

Which is better?
There's not necessarily one right answer on whether to use an ongoing conversation or the rewind approach with prompt files for iteration. Here are a few things to consider when making the choice:

Bad results tend to beget more bad results. Rewinding and iterating on the prompt is often more effective for correcting a wayward task than continuing to send more tell commands. Even if you are specifically prompting the model to correct a problem, having the wrong approach in its context will tend to bias it toward additional errors. Using rewind to the give the model a clean slate can work better in these scenarios.

Iterating on a prompt file with the rewind approach until you find your way to an effective prompt has another benefit: you can keep the final version of the prompt that produced a given set of changes right alongside the changes themselves in your codebase. This can be helpful for other developers (or your future self) if you want to revisit a task later.

A downside of the rewind approach is that it can involve re-running early steps of a plan over and over, which can be a lot more expensive than iterating with additional tell commands.

Core ConceptsPending Changes
Pending Changes
When you give Plandex a task, by default the changes aren't applied directly to your project files. Instead, they are accumulated in Plandex's version-controlled sandbox so that you can review them first.

Review Menu
Once Plandex has finished with a task, you'll see a review menu with several hotkey options. These hotkeys act as shortcuts for the commands described below.

Viewing Changes
plandex diff / plandex diff --ui
When Plandex has finished with your task, you can review the proposed changes with the plandex diff command, which shows them in git diff format:

plandex diff

--plain/-p: Outputs the diff in plain text with no ANSI codes.

You can also view the changes in a local browser UI with the plandex diff --ui command:

plandex diff --ui

The UI view offers additional options:

--side-by-side/-s: Show diffs in side-by-side view
--line-by-line/-l: Show diffs in line-by-line view (default)
Rejecting Files
If the plan's changes were applied incorrectly to a file, or you don't want to apply them for another reason, you can either apply the changes and then fix the problems manually, or you can reject the updates to that file and then make the proposed changes yourself manually.

To reject changes to a file (or multiple files), you can run plandex reject. You'll be prompted to select which files to reject.

plandex reject # select files to reject

You can reject all currently pending files by passing the --all flag to the reject command, or you can pass a list of specific files to reject:

plandex reject --all
plandex reject file1.ts file2.ts

If you rejected a file due to the changes being applied incorrectly, but you still want to use the code, either scroll up and copy the changes from the plan's output or run plandex convo to output the full conversation and copy from there. Then apply the updates to that file yourself.

Applying Changes
Once you're happy with the plan's changes, you can apply them to your project files with plandex apply:

plandex apply

Apply Flags & Config
Plandex v2 introduces several new config settings and flags for the apply command that give you control over what happens after changes are applied.

Command Execution & Debugging
After applying changes, Plandex can automatically execute pending commands. This is useful for running tests, starting servers, or performing other actions that verify the changes work as expected.

If commands fail, the changes are rolled back. Depending on the autonomy level and config, Plandex will then either attempt to debug automatically or prompt you with debugging options.

Auto-Applying Changes
When auto-apply is enabled, Plandex will automatically apply changes after a plan is complete without prompting or review. This is enabled at the full autonomy level, and also during auto-debugging.

Apply + Full Auto
You can also apply changes and debug in full auto mode with the --full flag:

plandex apply --full

Autonomy Matrix
Setting	None	Basic	Plus	Semi	Full
auto-apply	❌	❌	❌	❌	✅
auto-exec	❌	❌	❌	❌	✅
auto-debug	❌	❌	❌	❌	✅
auto-commit	❌	❌	✅	✅	✅

Core ConceptsExecution and Debugging
Execution and Debugging
Plandex v2 includes command execution and automated debugging capabilities that aim to balance power, control, and safety.

Command Execution
During a plan, apart from making changes to files, Plandex can write to a special path, _apply.sh, with any commands required to complete the plan. This commonly includes installing dependencies, running tests, building and running code, starting servers, and so on.

Commands accumulate in the sandbox just like pending changes to files. If execution fails, you can roll back changes and optionally send the output to the model for automated debugging and retries.

While Plandex will attempt to automatically infer relevant commands to run, it also tries not to overdo it. It generally won't, for example, run a test suite unless you've specifically asked it to, since it may not be desirable after every change. It tries to only run what's strictly necessary, to make local project-level changes instead of global system-wide changes, to check existing dependencies before installing, to write idempotent commands, to avoid hiding output or asking for user input, and to recover gracefully from failures.

If you want specific commands to run and Plandex isn't including automatically them because of it's somewhat conservative approach, you can either mention them in the prompt, or you can use the plandex debug command to automatically debug based on the output of any command you choose.

Debugging Browser Applications
If Chrome is installed, Plandex can automatically debug browser applications by catching errors and reading the console logs.

If a plan calls for starting a browser, Plandex will automatically include a plandex browser call to start Chrome and monitor for errors.

Execution Config
Control whether Plandex can execute commands:

plandex set-config can-exec true  # Allow command execution (default)
plandex set-config can-exec false # Disable command execution

If you toggle can-exec to false, Plandex will completely skip writing any commands to _apply.sh.

Control whether commands are executed automatically after applying changes (be careful with this):

plandex set-config auto-exec true  # Auto-execute commands
plandex set-config auto-exec false # Prompt before executing (default)

Automated Debugging
The plandex debug command repeatedly runs a terminal command, making fixes until it succeeds:

plandex debug 'npm test'  # Try up to 5 times (default)
plandex debug 10 'npm test'  # Try up to 10 times

This will:

Run the command and check for success/failure
If it fails, send the output to the LLM
Tentatively apply suggested fixes to your project files
If command is succesful after fixes, commit changes (if auto-commit is enabled). Otherwise, roll back changes and return to step 2.
Repeat until success or max tries reached
You can configure the default number of tries:

plandex set-config auto-debug-tries 10  # Set default to 10 tries

Common Debugging Workflows
Fixing Failing Tests
plandex debug 'npm test'
plandex debug 'go test ./...'
plandex debug 'pytest'

Fixing Build Errors
plandex debug 'npm run build'
plandex debug 'go build'
plandex debug 'cargo build'

Fixing Linting Errors
plandex debug 'npm run lint'
plandex debug 'golangci-lint run'

Fixing Type Errors
plandex debug 'npm run typecheck'
plandex debug 'tsc --noEmit'

A Manual Alternative
For a less automated approach, you can pipe the output of a command into plandex chat or plandex tell.

npm test | plandex tell 'npm test output'
go build | plandex chat 'what could be causing these type errors?'

This works similarly to plandex debug but without automatically applying changes and retrying.

Note that piping output into a prompt requires using the CLI directly in the terminal. You can't do it from inside the REPL.

Autonomy Matrix
Execution and debugging behavior is affected by your autonomy level:

Setting	None	Basic	Plus	Semi	Full
can-exec	❌	❌	✅	✅	✅
auto-exec	❌	❌	❌	❌	✅
auto-debug	❌	❌	❌	❌	✅
With full autonomy, commands are automatically executed and debugged after changes are applied. For other levels, you'll be prompted to approve execution and debugging steps.

Safety
Needless to say, you should be extremely careful when using full auto mode, auto-exec, auto-debug, and the debug command. They can make many changes quickly without any prompting or review, and can run commands that could potentially be destructive to your system. While the best LLMs are quite trustworthy when it comes to running commands and are unlikely to cause harm, it still pays to be cautious.

It's a good idea to make sure your git state is clean, and to check out an isolated branch before using these features.

Core ConceptsVersion Control
Version Control
Just about every aspect of a Plandex plan is version-controlled, and anything that can happen during a plan creates a new version in the plan's history. This includes:

Adding, removing, or updating context (when you do it manually or when Plandex does it automatically).
When you send a prompt.
When Plandex responds.
When Plandex builds the plan's proposed updates to a file into a pending change.
When pending changes are rejected.
When pending changes are applied to your project.
When models or model settings are updated.
Viewing History
To see the history of your plan, use the plandex log command:

plandex log

Rewinding
To rewind the plan to an earlier state, use the plandex rewind command:

plandex rewind # Select a previous state to rewind to
plandex rewind 3  # Rewind 3 steps
plandex rewind a7c8d66  # Rewind to a specific step

Preventing History Loss With Branches
Note that currently, there's no way to undo a rewind and recover any history that may have been cleared as a result. That said, you can use rewind without losing any history with branches. Use plandex checkout to a create a new branch before executing rewind, and the original branch will still include the history from before the rewind.

plandex checkout undo-changes # create a new branch called 'undo-changes'
plandex rewind ef883a # history is rewound in 'undo-changes' branch
plandex checkout main # main branch still retains original history

Viewing Conversation
While the Plandex history includes an entry for each message in the conversation, message content isn't included. To see the full conversation history, use the plandex convo command:

plandex convo

Rewinding After plandex apply
Like any other action that modifies a plan, running plandex apply to apply pending changes to your project file creates a new version in the plan's history. The plandex apply action can also be undone with plandex rewind.

While previous versions Plandex would not also revert the changes to your project files, this is now the default behavior as of v2.0.0. If there are potential conflicts (i.e. you've made changes on top since applying), Plandex will prompt you to decide how to handle the conflict.

This behavior can be disabled if desired by setting the auto-revert-on-rewind config setting to false:

plandex set-config auto-revert-on-rewind false
plandex set-config default auto-revert-on-rewind false # set the default value for all new plans

Core ConceptsBranches
Branches
Branches in Plandex allow you to easily try out multiple approaches to a task and see which gives you the best results. They work in conjunction with version control. Use cases include:

Comparing different prompting strategies.
Comparing results with different files in context.
Comparing results with different models or model-settings.
Using plandex rewind without losing history (first check out a new branch, then rewind).
Creating a Branch
To create a new branch, use the plandex checkout command:

plandex checkout new-branch
pdxd new-branch # alias

Switching Branches
To switch to a different branch, also use the plandex checkout command:

plandex checkout existing-branch

Listing Branches
To list all branches, use the plandex branches command:

plandex branches

Deleting a Branch
To delete a branch, use the plandex delete-branch command:

plandex delete-branch branch-name

Core ConceptsConversations
Conversations
Each time you send a prompt to Plandex or Plandex responds, the plan's conversation is updated. Conversations are version controlled and can be branched.

Conversation History
You can see the full conversation history with the convo command.

plandex convo # show the full conversation history

You can output the conversation in plain text with no ANSI codes with the --plain or -p flag.

plandex convo --plain

You can also show a specific message number or range of messages.

plandex convo 1 # show the initial prompt
plandex convo 1-5 # show messages 1 through 5
plandex convo 2- # show messages 2 through the end of the conversation

Conversation Summaries
Every time the AI model replies, Plandex will summarize the conversation so far in the background and store the summary in case it's needed later. When the conversation size in tokens exceeds the model's limit, Plandex will automatically replace some number of older messages with the corresponding summary. It will summarize as many messages as necessary to keep the conversation size under the limit.

Summaries are also used by the model as a form of working memory to keep track of the state of the plan—what's been implemented and what remains to be done.

You can see the latest summary with the summary command.

plandex summary # show the latest conversation summary

As with the convo command, you can output the summary in plain text with no ANSI codes with the --plain or -p flag.

plandex summary --plain


Core ConceptsAutonomy Levels
Autonomy
Plandex v2 offers multiple levels of autonomy with pre-set config. Each autonomy level controls:

Context loading and management
Plan continuation through multiple steps
Building of changes into pending updates
Application of changes to project files
Command execution and debugging
Git commits after changes are applied successfully
Autonomy Matrix
Feature	None	Basic	Plus	Semi	Full
auto-continue	❌	✅	✅	✅	✅
auto-build	❌	✅	✅	✅	✅
auto-load-context	❌	❌	❌	✅	✅
smart-context	❌	❌	✅	✅	✅
auto-update-context	❌	❌	✅	✅	✅
auto-apply	❌	❌	❌	❌	✅
can-exec	❌	❌	✅	✅	✅
auto-exec	❌	❌	❌	❌	✅
auto-debug	❌	❌	❌	❌	✅
auto-commit	❌	❌	✅	✅	✅
Setting Autonomy Levels
Using the CLI
# For current plan
plandex set-auto none    # No automation
plandex set-auto basic   # Auto-continue only
plandex set-auto plus    # Smart context management
plandex set-auto semi    # Auto-load context
plandex set-auto full    # Full automation

# For default settings on new plans
plandex set-auto default basic   # Set default to basic

When Starting the REPL
plandex --no-auto    # Start with 'None'
plandex --basic      # Start with 'Basic'
plandex --plus       # Start with 'Plus'
plandex --semi       # Start with 'Semi'
plandex --full       # Start with 'Full'

When Creating a New Plan
plandex new --no-auto    # Create with 'None'
plandex new --basic      # Create with 'Basic'
plandex new --plus       # Create with 'Plus'
plandex new --semi       # Create with 'Semi'
plandex new --full       # Create with 'Full'

Using the REPL
\set-auto none    # Set to None
\set-auto basic   # Set to Basic
\set-auto plus    # Set to Plus
\set-auto semi    # Set to Semi-Auto
\set-auto full    # Set to Full-Auto

Autonomy Levels
None
Complete manual control with no automation:

Manual context loading
Context updates require approval
Manual plan continuation
Manual building of changes
Manually apply changes
Command execution disabled
Basic
Equivalent to Plandex v1 autonomy level

Minimal automation:

Manual context loading
Context updates require approval
Auto-continue plans until completion
Auto-build changes into pending updates
Manually apply changes
Command execution disabled
Plus
Smart context management and manual command execution:

Manual context loading
Auto-update context when files change
Auto-continue plans until completion
Smart context management (only loads necessary files during implementation steps)
Auto-build changes into pending updates
Manually apply changes
Manual command execution
Auto-commit changes to git when applied
Semi
Default autonomy level for a fresh Plandex v2 install

Automatic context loading:

Auto-load context using project map
Auto-update context when files change
Auto-continue plans until completion
Smart context management
Auto-build changes into pending updates
Manually apply changes
Manual command execution
Auto-commit changes to git when applied
Full
Complete automation:

Auto-load context using project map
Auto-continue plans until completion
Smart context management
Auto-update context when files change
Auto-build changes into pending updates
Auto-apply changes to project files
Auto-execute commands after successful apply
Auto-debug failing commands
Auto-commit changes to git when applied
Custom
You can give a plan custom autonomy settings by setting config values directly:

plandex set-config auto-continue true
plandex set-config auto-build true
plandex set-config auto-load-context true

More details on configuration

Safety
Be extremely careful with full auto mode! It can make many changes quickly without any prompting or review, and can run commands that could potentially be destructive to your system.

It's a good idea to make sure your git state is clean, and to check out an isolated branch before running these commands.

Core ConceptsConfiguration
Configuration
Plandex v2 provides a flexible configuration system that lets you customize its behavior based on the task you're working on and your preferences.

Viewing Config
plandex config           # View current plan's configuration
plandex config default   # View default configuration for new plans

Modifying Config
plandex set-config                       # Select from a list of options
plandex set-config auto-apply true       # Set a specific option
plandex set-config default auto-mode basic   # Set default for new plans

Key Settings
Autonomy Level
Autonomy settings control the overall level of automation Plandex will use. See the Autonomy page for more details and shortcuts for setting autonomy levels.

Setting	Description	Default
auto-mode	Overall autonomy level (none, basic, plus, semi, full)	semi
Plan Control
Setting	Description	Default
auto-continue	Continue plans until completion	true
auto-build	Build changes into pending updates	true
auto-apply	Apply changes to project files	false
Context Management
Setting	Description	Default
auto-update-context	Update context when files change	true
auto-load-context	Load context using project map	true
smart-context	Load only necessary files for each step	true
Execution
Setting	Description	Default
can-exec	Allow command execution (safety setting)	true
auto-exec	Automatically execute commands	true
auto-debug	Automatically debug commands	false
auto-debug-tries	Number of tries for automatic debugging	5
Version Control
Setting	Description	Default
auto-commit	Commit changes to git when applied	true
auto-revert-on-rewind	Revert project files when rewinding	true
Command Line Overrides
Settings can be overridden with command line flags:

# this will apply changes, automatically execute commands, and automatically debug regardless of your autonomy level and config settings
plandex tell "add a feature" --apply --auto-exec --debug


These overrides apply only to the current command execution and don't change the saved configuration.

See the CLI Reference for a full list of command line flags for each command.

REPL Commands
\config                # View current plan config
\config default        # View default config
\set-config            # Modify current plan config
\set-config default    # Modify default config for new plans
\set-auto              # Set autonomy level
\set-auto default      # Set default autonomy level for new plans

Core ConceptsBackground Tasks
Background Tasks
Plandex allows you to run tasks in the background, helping you work on multiple tasks in parallel.

Note: in Plandex v2, sending tasks to the background is disabled by default, because it's not compatible with automatic context loading. If you set a lower autonomy level, you can use background tasks.

Running a Task in the Background
To run a task in the background, use the --bg flag with plandex tell or plandex continue.

plandex tell --bg "Add an update credit card form to 'src/components/billing'"
plandex continue --bg

The plandex stream TUI also has a b hotkey that allows you to send a streaming plan to the background.

Listing Background Tasks
To list active and recently finished background tasks, use the plandex ps command:

plandex ps

Connecting to a Background Task
To connect to a running background task and view its stream in the plan stream TUI, use the plandex connect command:

plandex connect

Stopping a Background Task
To stop a running background task, use the plandex stop command:

plandex stop

Core ConceptsCollaboration / Orgs
Collaboration and Orgs
While so far Plandex is mainly focused on a single-user experience, we plan to add features for sharing, collaboration, and team management in the future, and some groundwork has already been done. Orgs are the basis for collaboration in Plandex.

Multiple Users
Orgs are helpful already if you have multiple users using Plandex in the same project. Because Plandex outputs a .plandex file containing a bit of non-sensitive config data in each directory a plan is created in, you'll have problems with multiple users unless you either get each user into the same org or put .plandex in your .gitignore file. Otherwise, each user will overwrite other users' .plandex files on every push, and no one will be happy.

Domain Access
When starting out with Plandex and creating a new org, you have the option of automatically granting access to anyone with an email address on your domain.

Invitations
If you choose not to grant access to your whole domain, or you want to invite someone from outside your email domain, you can use plandex invite:

plandex invite

Joining an Org
To join an org you've been invited to, use plandex sign-in:

plandex sign-in

Listing Users and Invites
To list users and pending invites, use plandex users:

plandex users

Revoking Users and Invites
To revoke an invite or remove a user, use plandex revoke:

plandex revoke

ModelsRoles
Model Roles
Plandex has multiple roles that are used for different aspects of its functionality. Each role can have its model and settings changed independently.

Roles
planner
This is the 'main' role that replies to prompts and makes plans.

Can optionally have a 'large context fallback' set, which is the model to use when the context input limit is exceeded.

architect
When auto-context is enabled, this role makes a high-level plan using the project map, then determines what context to to provide for the 'planner' role.

This role is optional. It falls back to the planner role if not set.

coder
This role writes code to implement each step of the plan made by the planner role during the planning stage.

Instruction-following is important for this role as it needs to follow specific formatting rules.

This role is optional. It falls back to the planner role if not set.

summarizer
Summarizes conversations to stay under the limit set in max-convo-tokens.

auto-continue
Determines whether a plan is finished or should automatically continue based on the previous response.

builder
Builds the proposed changes described by the planner role into pending file updates.

whole-file-builder
Builds the proposed changes described by the planner role into pending file updates by writing the entire file. Used as a fallback if more targeted edits fail.

This role is optional. It falls back to the builder role if not set.

names
Gives automatically-generated names to plans and context.

commit-messages
Automatically generates commit messages for a set of pending updates.

Fallbacks and Variants
Roles can optionally have a 'large context fallback' set, which is an alternate model with a large context window to use when the context input limit is exceeded.

They can also have a 'large output fallback' set, which is an alternate model with a large output window to use when the output limit is exceeded.

They can also have a 'strong' variant set, which is an alternative model with stronger capabilities that may be used in some cases when the default model for the role is struggling.

ModelsSettings
Model Settings
Plandex gives you a number of ways to control the models and models settings used in your plans. Changes to models and model settings are version controlled and can be branched.

models and set-model
You can see the current plan's models and model settings with the models command and change them with the set-model command.

plandex models # show the current AI models and model settings
plandex models available # show all available models
plandex set-model # select from a list of models, model packs, and settings
plandex set-model planner openrouter/anthropic/claude-3.7-sonnet # set the main planner model to Claude Sonnet 3.7 from OpenRouter.ai
plandex set-model builder temperature 0.1 # set the builder model's temperature to 0.1
plandex set-model max-tokens 4000 # set the planner model overall token limit to 4000
plandex set-model max-convo-tokens 20000  # set how large the conversation can grow before Plandex starts using summaries


Model Defaults 
set-model updates model settings for the current plan. If you want to change the default model settings for all new plans, use set-model default.

plandex models default # show the default model settings
plandex set-model default # select from a list of models and settings
plandex set-model default planner openai/gpt-4o # set the default planner model to OpenAI gpt-4o

Model Packs
Instead of changing models for each role one by one, model packs let you switch out all roles at once. It's the recommended way to manage models.

You can list available model packs with model-packs:

plandex model-packs # list all available model packs

You can create your own model packs with model-packs create, list built-in and custom model packs with model-packs, show a specific model pack with model-packs show, update a model pack with model-packs update, and remove custom model packs with model-packs delete.

plandex set-model # select from a list of model packs for the current plan
plandex set-model default # select from a list of model packs to set as the default for all new plans
plandex set-model anthropic-claude-3.5-sonnet-gpt-4o # set the current plan's model pack by name
plandex set-model default Mixtral-8x22b/Mixtral-8x7b/gpt-4o # set the default model pack for all new plans

plandex model-packs # list built-in and custom model packs
plandex model-packs create # create a new custom model pack
plandex model-packs --custom # list only custom model packs
plandex model-packs show # show a specific model pack
plandex model-packs update # update a model pack
plandex model-packs delete # delete a custom model pack


Custom Models
Use models add to add a custom model and use any provider that is compatible with OpenAI, including OpenRouter.ai, Together.ai, Ollama, Replicate, and more.

plandex models add # add a custom model
plandex models available --custom # show all available custom models
plandex models delete # delete a custom model

CLI Reference
CLI Reference
All Plandex CLI commands and their options.

Usage
plandex [command] [flags]
pdx [command] [flags] # 'pdx' is an alias for 'plandex'

Help
Built-in help.

plandex help
pdx h # alias

--all/-a: List all commands.

For help on a specific command, use:

plandex [command] --help

REPL
The easiest way to use Plandex is through the REPL. Start it in your project directory with:

plandex

or for short:

pdx

Flags
The REPL has a few convenient flags you can use to start it with different modes, autonomy settings, and model packs. You can pass any of these to plandex or pdx when starting the REPL.

  Mode
    --chat, -c     Start in chat mode (for conversation without making changes)
    --tell, -t     Start in tell mode (for implementation)

  Autonomy
    --no-auto      None → step-by-step, no automation
    --basic        Basic → auto-continue plans, no other automation
    --plus         Plus → auto-update context, smart context, auto-commit changes
    --semi         Semi-Auto → auto-load context
    --full         Full-Auto → auto-apply, auto-exec, auto-debug

  Models
    --daily        Daily driver pack (default models, balanced capability, cost, and speed)
    --reasoning    Similar to daily driver, but uses reasoning model for planning
    --strong       Strong pack (more capable models, higher cost and slower)
    --cheap        Cheap pack (less capable models, lower cost and faster)
    --oss          Open source pack (open source models)
    --gemini-preview   Gemini preview pack (Gemini 2.5 Pro Preview for planning and coding, default models for other roles)


All commands listed below can be run in the REPL by prefixing them with a backslash (\), e.g. \new.

Plans
new
Start a new plan.

plandex new
plandex new -n new-plan # with name

--name/-n: Name of the new plan. The name is generated automatically after first prompt if no name is specified on creation.

--context-dir/-d: Base directory to load context from when auto-loading context is enabled. Defaults to . (current directory). Set a different directoy if you don't want all files to be included in the project map.

--no-auto: Start the plan with auto-mode 'None' (step-by-step, no automation).

--basic: Start the plan with auto-mode 'Basic' (auto-continue plans, no other automation).

--plus: Start the plan with auto-mode 'Plus' (auto-update context, smart context, auto-commit changes).

--semi: Start the plan with auto-mode 'Semi-Auto' (auto-load context).

--full: Start the plan with auto-mode 'Full-Auto' (auto-apply, auto-exec, auto-debug).

--daily: Start the plan with the daily driver model pack.

--reasoning: Start the plan with the reasoning model pack.

--strong: Start the plan with the strong model pack.

--cheap: Start the plan with the cheap model pack.

--oss: Start the plan with the open source model pack.

--gemini-exp: Start the plan with the Gemini experimental model pack.

plans
List plans. Output includes index, when each plan was last updated, the current branch of each plan, the number of tokens in context, and the number of tokens in the conversation (prior to summarization).

Includes full details on plans in current directory. Also includes names of plans in parent directories and child directories.

plandex plans
plandex plans --archived # list archived plans only

pdx pl # alias

--archived/-a: List archived plans only.

current
Show current plan. Output includes when the plan was last updated and created, the current branch, the number of tokens in context, and the number of tokens in the conversation (prior to summarization).

plandex current
pdx cu # alias

cd
Set current plan by name or index.

plandex cd # select from a list of plans
plandex cd some-plan # by name
plandex cd 4 # by index in `plandex plans`

With no arguments, Plandex prompts you with a list of plans to select from.

With one argument, Plandex selects a plan by name or by index in the plandex plans list.

delete-plan
Delete a plan by name, index, range, pattern, or select from a list.

plandex delete-plan # select from a list of plans
plandex delete-plan some-plan # by name
plandex delete-plan 4 # by index in `plandex plans`
plandex delete-plan 2-4 # by range of indices
plandex delete-plan 'docs-*' # by pattern
plandex delete-plan --all # delete all plans
pdx dp # alias

--all/-a: Delete all plans.

rename
Rename the current plan.

plandex rename # prompt for new name
plandex rename new-name # set new name

archive
Archive a plan.

plandex archive # select from a list of plans
plandex archive some-plan # by name
plandex archive 4 # by index in `plandex plans`

pdx arc # alias

unarchive
Unarchive a plan.

plandex unarchive # select from a list of archived plans
plandex unarchive some-plan # by name
plandex unarchive 4 # by index in `plandex plans --archived`
pdx unarc # alias

Context
load
Load files, directories, directory layouts, URLs, notes, images, or piped data into context.

plandex load component.ts # single file
plandex load component.ts action.ts reducer.ts # multiple files
plandex load lib -r # loads lib and all its subdirectories
plandex load tests/**/*.ts # loads all .ts files in tests and its subdirectories
plandex load . --tree # loads the layout of the current directory and its subdirectories (file names only)
plandex load https://redux.js.org/usage/writing-tests # loads the text-only content of the url
npm test | plandex load # loads the output of `npm test`
plandex load -n 'add logging statements to all the code you generate.' # load a note into context
plandex load ui-mockup.png # load an image into context

pdx l component.ts # alias


--recursive/-r: Load an entire directory and all its subdirectories.

--tree: Load directory tree layout with file names only.

--map: Load file map of the given directory (function/method/class signatures, variable names, types, etc.)

--note/-n: Load a note into context.

--force/-f: Load files even when ignored by .gitignore or .plandexignore.

--detail/-d: Image detail level when loading an image (high or low)—default is high. See https://platform.openai.com/docs/guides/vision/low-or-high-fidelity-image-understanding for more info.

ls
List everything in the current plan's context. Output includes index, name, type, token size, when the context added, and when the context was last updated.

plandex ls

plandex list-context # longer alias

rm
Remove context by index, range, name, or glob.

plandex rm some-file.ts # by name
plandex rm app/**/*.ts # by glob pattern
plandex rm 4 # by index in `plandex ls`
plandex rm 2-4 # by range of indices

plandex remove # longer alias
plandex unload # longer alias

show
Output context by name or index.

plandex show some-file.ts # by name
plandex show 4 # by index in `plandex ls`

update
Update any outdated context.

plandex update
pdx u # alias

clear
Remove all context.

plandex clear

Control
tell
Describe a task.

plandex tell -f prompt.txt # from file
plandex tell # open vim to write prompt
plandex tell "add a cancel button to the left of the submit button" # inline

pdx t # alias

--file/-f: File path containing prompt.

--stop/-s: Stop after a single model response (don't auto-continue). Defaults to opposite of config value auto-continue.

--no-build/-n: Don't build proposed changes into pending file updates. Defaults to opposite of config value auto-build.

--bg: Run task in the background. Only allowed if --auto-load-context and --apply/-a are not enabled. Not allowed with the default autonomy level in Plandex v2.

--auto-update-context: Automatically confirm context updates. Defaults to config value auto-update-context.

--auto-load-context: Automatically load context using project map. Defaults to config value auto-load-context.

--smart-context: Use smart context to only load the necessary file(s) for each step during implementation. Defaults to config value smart-context.

--no-exec: Don't execute commands after successful apply. Defaults to opposite of config value can-exec.

--auto-exec: Automatically execute commands after successful apply without confirmation. Defaults to config value auto-exec.

--debug: Automatically execute and debug failing commands (optionally specify number of tries—default is 5). Defaults to config values of auto-debug and auto-debug-tries.

--apply/-a: Automatically apply changes (and confirm context updates). Defaults to config value auto-apply.

--commit/-c: Commit changes to git when --apply/-a is passed. Defaults to config value auto-commit.

--skip-commit: Don't commit changes to git. Defaults to opposite of config value auto-commit.

continue
Continue the plan.

plandex continue

pdx c # alias

--stop/-s: Stop after a single model response (don't auto-continue). Defaults to opposite of config value auto-continue.

--no-build/-n: Don't build proposed changes into pending file updates. Defaults to opposite of config value auto-build.

--bg: Run task in the background. Only allowed if --auto-load-context and --apply/-a are not enabled. Not allowed with the default autonomy level in Plandex v2.

--auto-update-context: Automatically confirm context updates. Defaults to config value auto-update-context.

--auto-load-context: Automatically load context using project map. Defaults to config value auto-load-context.

--smart-context: Use smart context to only load the necessary file(s) for each step during implementation. Defaults to config value smart-context.

--no-exec: Don't execute commands after successful apply. Defaults to opposite of config value can-exec.

--auto-exec: Automatically execute commands after successful apply without confirmation. Defaults to config value auto-exec.

--debug: Automatically execute and debug failing commands (optionally specify number of tries—default is 5). Defaults to config values of auto-debug and auto-debug-tries.

--apply/-a: Automatically apply changes (and confirm context updates). Defaults to config value auto-apply.

--commit/-c: Commit changes to git when --apply/-a is passed. Defaults to config value auto-commit.

--skip-commit: Don't commit changes to git. Defaults to opposite of config value auto-commit.

build
Build any unbuilt pending changes from the plan conversation.

plandex build
pdx b # alias

--bg: Build in the background. Not allowed if --apply/-a is enabled.

--stop/-s: Stop after a single model response (don't auto-continue). Defaults to opposite of config value auto-continue.

--no-build/-n: Don't build proposed changes into pending file updates. Defaults to opposite of config value auto-build.

--auto-update-context: Automatically confirm context updates. Defaults to config value auto-update-context.

--no-exec: Don't execute commands after successful apply. Defaults to opposite of config value can-exec.

--auto-exec: Automatically execute commands after successful apply without confirmation. Defaults to config value auto-exec.

--debug: Automatically execute and debug failing commands (optionally specify number of tries—default is 5). Defaults to config values of auto-debug and auto-debug-tries.

--apply/-a: Automatically apply changes (and confirm context updates). Defaults to config value auto-apply.

--commit/-c: Commit changes to git when --apply/-a is passed. Defaults to config value auto-commit.

--skip-commit: Don't commit changes to git. Defaults to opposite of config value auto-commit.

chat
Ask a question or chat without making any changes.

plandex chat "is it clear from the context how to add a new line chart?"
pdx ch # alias

--file/-f: File path containing prompt.

--bg: Run task in the background. Not allowed if --auto-load-context is enabled. Not allowed with the default autonomy level in Plandex v2.

--auto-update-context: Automatically confirm context updates. Defaults to config value auto-update-context.

--auto-load-context: Automatically load context using project map. Defaults to config value auto-load-context.

debug
Repeatedly run a command and automatically attempt fixes until it succeeds, rolling back changes on failure. Defaults to 5 tries before giving up.

plandex debug 'npm test' # try 5 times or until it succeeds
plandex debug 10 'npm test' # try 10 times or until it succeeds
pdx db 'npm test' # alias

--commit/-c: Commit changes to git when --apply/-a is passed. Defaults to config value auto-commit.

--skip-commit: Don't commit changes to git. Defaults to opposite of config value auto-commit.

Changes
diff
Review pending changes in 'git diff' format or in a local browser UI.

plandex diff
plandex diff --ui

--plain/-p: Output diffs in plain text with no ANSI codes.

--ui/-u: Review pending changes in a local browser UI.

--side-by-side/-s: Show diffs UI in side-by-side view

--line-by-line/-l: Show diffs UI in line-by-line view

apply
Apply pending changes to project files.

plandex apply
pdx ap # alias

--auto-update-context: Automatically confirm context updates. Defaults to config value auto-update-context.

--no-exec: Don't execute commands after successful apply. Defaults to opposite of config value can-exec.

--auto-exec: Automatically execute commands after successful apply without confirmation. Defaults to config value auto-exec.

--debug: Automatically execute and debug failing commands (optionally specify number of tries—default is 5). Defaults to config values of auto-debug and auto-debug-tries.

--commit/-c: Commit changes to git when --apply/-a is passed. Defaults to config value auto-commit.

--skip-commit: Don't commit changes to git. Defaults to opposite of config value auto-commit.

--full: Apply the plan and debug in full auto mode.

reject
Reject pending changes to one or more project files.

plandex reject # select from a list of pending files to reject
plandex reject file.ts # one file
plandex reject file.ts another-file.ts # multiple files
plandex reject --all # all pending files

pdx rj file.ts # alias

--all/-a: Reject all pending files.

History
log
Show plan history.

plandex log

plandex history # alias
plandex logs # alias

rewind
Rewind to a previous state.

plandex rewind # select from a list of previous states to rewind to
plandex rewind 3 # rewind 3 steps
plandex rewind a7c8d66 # rewind to a specific step from `plandex log`

convo
Show the current plan's conversation.

plandex convo
plandex convo 1 # show a specific message
plandex convo 1-5 # show a range of messages
plandex convo 3- # show all messages from 3 to the end

--plain/-p: Output conversation in plain text with no ANSI codes.

summary
Show the latest summary of the current plan.

plandex summary

--plain/-p: Output summary in plain text with no ANSI codes.

Branches
branches
List plan branches. Output includes index, name, when the branch was last updated, the number of tokens in context, and the number of tokens in the conversation (prior to summarization).

plandex branches
pdx br # alias

checkout
Checkout or create a branch.

plandex checkout # select from a list of branches or prompt to create a new branch
plandex checkout some-branch # checkout by name or create a new branch with that name

pdx co # alias

delete-branch
Delete a branch by name or index.

plandex delete-branch # select from a list of branches
plandex delete-branch some-branch # by name
plandex delete-branch 4 # by index in `plandex branches`

pdx dlb # alias

Background Tasks / Streams
ps
List active and recently finished plan streams. Output includes stream ID, plan name, branch name, when the stream was started, and the stream's status (active, finished, stopped, errored, or waiting for a missing file to be selected).

plandex ps

connect
Connect to an active plan stream.

plandex connect # select from a list of active streams
plandex connect a4de # by stream ID in `plandex ps`
plandex connect some-plan main # by plan name and branch name
pdx conn # alias

stop
Stop an active plan stream.

plandex stop # select from a list of active streams
plandex stop a4de # by stream ID in `plandex ps`
plandex stop some-plan main # by plan name and branch name

Configuration
config
Show current plan config. Output includes configuration settings for the plan, such as autonomy level, model settings, and other plan-specific options.

plandex config

config default
Show the default config used for new plans. Output includes the default configuration settings that will be applied to newly created plans.

plandex config default

set-config
Update configuration settings for the current plan.

plandex set-config # select from a list of config options
plandex set-config auto-context true # set a specific config option

With no arguments, Plandex prompts you to select from a list of config options.

With arguments, allows you to directly set specific configuration options for the current plan.

set-config default
Update the default configuration settings for new plans.

plandex set-config default # select from a list of config options
plandex set-config default auto-mode basic # set a specific default config option

Works exactly the same as set-config above, but sets the default configuration for all new plans instead of only the current plan.

set-auto
Update the auto-mode (autonomy level) for the current plan.

plandex set-auto # select from a list of auto-modes
plandex set-auto full # set to full automation
plandex set-auto semi # set to semi-auto mode
plandex set-auto plus # set to plus mode
plandex set-auto basic # set to basic mode
plandex set-auto none # set to none (step-by-step, no automation)

With no arguments, Plandex prompts you to select from a list of automation levels.

With one argument, Plandex sets the automation level directly to the specified value.

set-auto default
Set the default auto-mode for new plans.

plandex set-auto default # select from a list of auto-modes
plandex set-auto default basic # set default to basic mode

Works exactly the same as set-auto above, but sets the default automation level for all new plans instead of only the current plan.

Models
models
Show current plan models and model settings.

plandex models

models default
Show org-wide default models and model settings for new plans.

plandex models default

models available
Show available models.

plandex models available # show all available models
plandex models available --custom # show available custom models only

--custom: Show available custom models only.

set-model
Update current plan models or model settings.

plandex set-model # select from a list of models and settings
plandex set-model planner openai/gpt-4 # set the model for a role
plandex set-model gpt-4-turbo-latest # set the current plan's model pack by name (sets all model roles at once—see `model-packs` below)
plandex set-model builder temperature 0.1 # set a model setting for a role
plandex set-model max-tokens 4000 # set the planner model overall token limit to 4000
plandex set-model max-convo-tokens 20000  # set how large the conversation can grow before Plandex starts using summaries


With no arguments, Plandex prompts you to select from a list of models and settings.

With arguments, can take one of the following forms:

plandex set-model [role] [model]: Set the model for a role.
plandex set-model [model-pack]: Set the current plan's model pack by name.
plandex set-model [role] [setting] [value]: Set a model setting for a role.
plandex set-model [setting] [value]: Set a model setting for the current plan.
Models are specified as provider/model-name, e.g. openai/gpt-4, openrouter/anthropic/claude-opus-3, together/mistralai/Mixtral-8x22B-Instruct-v0.1, etc.

See all the model roles here.

Model role settings:

temperature: Higher temperature means more randomness, which can produce more creativity but also more errors.
top-p: Top-p sampling is a way to prevent the model from generating improbable text by only considering the most likely tokens.
Plan settings:

max-tokens: The overall token limit for the planner model.
max-convo-tokens: How large the conversation can grow before Plandex starts using summaries.
reserved-output-tokens: The number of tokens reserved for output from the model.
set-model default
Update org-wide default model settings for new plans.

plandex set-model default # select from a list of models and settings
plandex set-model default planner openai/gpt-4 # set the model for a role
# etc. — same options as `set-model` above

Works exactly the same as set-model above, but sets the default model settings for all new plans instead of only the current plan.

models add
Add a custom model.

plandex models add

Plandex will prompt you for all required information to add a custom model.

models delete
Delete a custom model.

plandex models delete # select from a list of custom models
plandex models delete some-model # by name
plandex models delete 4 # by index in `plandex models available --custom`

model-packs
Show all available model packs.

plandex model-packs

--custom: Show available custom (user-created) model packs only.

model-packs create
Create a new custom model pack.

plandex model-packs create

Plandex will prompt you for all required information to create a custom model pack.

model-packs show
Show a built-in or custom model pack's settings.

plandex model-packs show # select from a list of built-in and custom model packs
plandex model-packs show some-model-pack # by name

model-packs update
Update a custom model pack's settings.

plandex model-packs update # select from a list of custom model packs
plandex model-packs update some-model-pack # by name

model-packs delete
Delete a custom model pack.

plandex model-packs delete
plandex model-packs delete some-model-pack # by name
plandex model-packs delete 4 # by index in `plandex model-packs --custom`

Account Management
sign-in
Sign in, accept an invite, or create an account.

plandex sign-in

--pin: Sign in with a pin from the Plandex Cloud web UI.

Unless you pass --pin (from the Plandex Cloud web UI), Plandex will prompt you for all required information to sign in, accept an invite, or create an account.

invite
Invite a user to join your org.

plandex invite # prompt for email, name, and role
plandex invite name@domain.com 'Full Name' member # invite with email, name, and role

Users can be invited as member, admin, or owner.

revoke
Revoke an invite or remove a user from your org.

plandex revoke # select from a list of users and invites
plandex revoke name@domain.com # by email

users
List users and pending invites in your org.

plandex users

Plandex Cloud
billing
Show the billing settings page.

plandex billing

usage
Show Plandex Cloud current balance and usage report. Includes recent spend, amount saved by input caching, a breakdown of spend by plan, category, and model, and a log of individual transactions with the --log flag.

Defaults to showing usage for the current session if you're using the REPL. Otherwise, defaults to showing usage for the day so far.

Requires Integrated Models mode.

plandex usage

--today: Show usage for the day so far.

--month: Show usage for the current billing month.

--plan: Show usage for the current plan.

--log: Show a log of individual transactions. Defaults to showing the log for the current session if you're using the REPL. Otherwise, defaults to showing the log for the day so far. Works with --today, --month, and --plan flags.

Flags for usage --log:

--debits: Show only debits in the log.

--purchases: Show only purchases in the log.

--page-size/-s: Number of transactions to display per page.

--page/-p: Page number to display.

